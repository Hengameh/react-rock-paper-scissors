{"version":3,"sources":["components/PlayerChoice.js","components/Time.js","App.js","serviceWorker.js","index.js"],"names":["PlayerChoice","name","onClickChoice","data-type","className","src","alt","onClick","Time","props","state","time","Date","this","setState","setInterval","currentTime","toLocaleTimeString","Component","CHOICES","App","handleClickReset","console","log","playerScore","computerScore","handleClickChoice","bind","playerChoice","computerChoice","randomNum","Math","random","random0to2","floor","getRandomChoice","alert","id","style","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAkBeA,MAhBf,YAAgD,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,cAK5B,OACE,yBACEC,YAAWF,EACXG,UAAU,gBACVC,IAAG,UAAKJ,EAAL,QACHK,IAAG,UAAKL,GACRM,QAVgB,WAClBL,EAAcD,OCmBHO,G,wDApBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,KAAM,IAAIC,MAFR,E,0DAMjBC,KAAKC,SAAS,CACZH,KAAM,IAAIC,S,0CAIO,IAAD,OAClBG,aAAY,kBAAM,EAAKC,gBAAe,O,+BAItC,OAAO,2BAAIH,KAAKH,MAAMC,KAAKM,0B,GAjBZC,cCGbC,EAAU,CAAC,OAAQ,QAAS,Y,IA0GnBC,E,kDAjGb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAWRY,iBAAmB,WACjBC,QAAQC,IAAI,WAEZ,EAAKT,SAAS,CACZU,YAAa,EACbC,cAAe,KAdjB,EAAKf,MAAQ,CACXc,YAAa,EACbC,cAAe,GAGjB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKN,iBAAmB,EAAKA,iBAAiBM,KAAtB,gBATP,E,8DAqBDC,GAChB,IAAMC,EA7BV,WACE,IAAMC,EAAYC,KAAKC,SACjBC,EAAaF,KAAKG,MAAkB,EAAZJ,GAC9B,OAAOX,EAAQc,GA0BUE,GACnBP,IAAiBC,EAMD,SAAjBD,GAA8C,aAAnBC,GACV,UAAjBD,GAA+C,SAAnBC,GACX,aAAjBD,GAAkD,UAAnBC,GAGhChB,KAAKC,SAAS,CAAEU,YAAaX,KAAKH,MAAMc,YAAc,IACtDY,MAAM,2BAGNvB,KAAKC,SAAS,CAAEW,cAAeZ,KAAKH,MAAMe,cAAgB,IAC1DW,MAAM,4BAfNA,MAAM,gB,2CAoBuB,IAA3BvB,KAAKH,MAAMc,aACbY,MAAM,wBACNvB,KAAKQ,oBACiC,IAA7BR,KAAKH,MAAMe,gBACpBW,MAAM,0BACNvB,KAAKQ,sB,+BAKP,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,uDACA,kBAAC,EAAD,OAGF,yBAAKA,UAAU,eACb,yBAAKiC,GAAG,eAAejC,UAAU,SAAjC,UAGA,yBAAKiC,GAAG,iBAAiBjC,UAAU,SAAnC,QAGA,0BAAMkC,MAAO,IAAKzB,KAAKH,MAAMc,aAP/B,IAQE,8BAAOX,KAAKH,MAAMe,gBAGpB,yBAAKY,GAAG,QACN,yBAAKjC,UAAU,WAAWC,IAAI,eAAeC,IAAI,aAEjD,yBAAKF,UAAU,UAAf,8BAEA,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAcH,KAAK,QAAQC,cAAeW,KAAKa,oBAC/C,kBAAC,EAAD,CAAczB,KAAK,OAAOC,cAAeW,KAAKa,oBAC9C,kBAAC,EAAD,CACEzB,KAAK,WACLC,cAAeW,KAAKa,qBAIxB,uBAAGW,GAAG,kBAAN,mBAEA,4BAAQjC,UAAU,UAAUG,QAASM,KAAKQ,kBAA1C,iB,GAzFQkB,IAAMrB,WCDJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.789c1ca7.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction PlayerChoice({ name, onClickChoice }) {\n  const handleClick = () => {\n    onClickChoice(name);\n  };\n\n  return (\n    <img\n      data-type={name}\n      className=\"button choice\"\n      src={`${name}.png`}\n      alt={`${name}`}\n      onClick={handleClick}\n    />\n  );\n}\n\nexport default PlayerChoice;\n","import React, { Component } from \"react\";\r\n\r\nclass Time extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { time: new Date() };\r\n  }\r\n\r\n  currentTime() {\r\n    this.setState({\r\n      time: new Date(),\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    setInterval(() => this.currentTime(), 1000);\r\n  }\r\n\r\n  render() {\r\n    return <p>{this.state.time.toLocaleTimeString()}</p>;\r\n  }\r\n}\r\n\r\nexport default Time;\r\n","import React from \"react\";\nimport PlayerChoice from \"./components/PlayerChoice\";\nimport \"./App.css\";\nimport Time from \"./components/Time\";\n\nconst CHOICES = [\"rock\", \"paper\", \"scissors\"];\n\nfunction getRandomChoice() {\n  const randomNum = Math.random(); // random num from 0-1\n  const random0to2 = Math.floor(randomNum * 3);\n  return CHOICES[random0to2];\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playerScore: 0,\n      computerScore: 0,\n    };\n\n    this.handleClickChoice = this.handleClickChoice.bind(this);\n    this.handleClickReset = this.handleClickReset.bind(this);\n  }\n\n  handleClickReset = () => {\n    console.log(\"CLICKED\");\n\n    this.setState({\n      playerScore: 0,\n      computerScore: 0,\n    });\n  };\n\n  handleClickChoice(playerChoice) {\n    const computerChoice = getRandomChoice();\n    if (playerChoice === computerChoice) {\n      alert(\"Its a tie!\");\n      return;\n    }\n\n    if (\n      (playerChoice === \"rock\" && computerChoice === \"scissors\") ||\n      (playerChoice === \"paper\" && computerChoice === \"rock\") ||\n      (playerChoice === \"scissors\" && computerChoice === \"paper\")\n    ) {\n      // Player won\n      this.setState({ playerScore: this.state.playerScore + 1 });\n      alert(\"Player won the round!\");\n    } else {\n      // Computer won\n      this.setState({ computerScore: this.state.computerScore + 1 });\n      alert(\"Computer won the round!\");\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.playerScore === 5) {\n      alert(\"Player won the game!\");\n      this.handleClickReset();\n    } else if (this.state.computerScore === 5) {\n      alert(\"Computer won the game!\");\n      this.handleClickReset();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Rock Paper Scissor Game</h1>\n          <Time />\n        </header>\n\n        <div className=\"score-board\">\n          <div id=\"player-label\" className=\"badge\">\n            player\n          </div>\n          <div id=\"computer-label\" className=\"badge\">\n            comp\n          </div>\n          <span style={{}}>{this.state.playerScore}</span>:\n          <span>{this.state.computerScore}</span>\n        </div>\n\n        <div id=\"game\">\n          <img className=\"computer\" src=\"computer.png\" alt=\"computer\" />\n\n          <div className=\"output\">Result of the current Game</div>\n\n          <div className=\"button-wrapper\">\n            <PlayerChoice name=\"paper\" onClickChoice={this.handleClickChoice} />\n            <PlayerChoice name=\"rock\" onClickChoice={this.handleClickChoice} />\n            <PlayerChoice\n              name=\"scissors\"\n              onClickChoice={this.handleClickChoice}\n            />\n          </div>\n\n          <p id=\"action-message\"> Make your move</p>\n\n          <button className=\"restart\" onClick={this.handleClickReset}>\n            Restart\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}