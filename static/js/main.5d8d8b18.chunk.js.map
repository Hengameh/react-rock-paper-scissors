{"version":3,"sources":["components/PlayerChoice.js","components/Time.js","App.js","serviceWorker.js","index.js"],"names":["PlayerChoice","name","onClickChoice","data-type","className","src","alt","onClick","Time","props","state","time","Date","this","setState","setInterval","currentTime","toLocaleTimeString","Component","CHOICES","App","handleClickReset","console","log","playerScore","computerScore","resultMessage","handleClickChoice","bind","playerChoice","computerChoice","randomNum","Math","random","random0to2","floor","getRandomChoice","id","style","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d8d8b18.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction PlayerChoice({ name, onClickChoice }) {\n  const handleClick = () => {\n    onClickChoice(name);\n  };\n\n  return (\n    <img\n      data-type={name}\n      className=\"button choice\"\n      src={`${name}.png`}\n      alt={`${name}`}\n      onClick={handleClick}\n    />\n  );\n}\n\nexport default PlayerChoice;\n","import React, { Component } from \"react\";\n\nclass Time extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { time: new Date() };\n  }\n\n  currentTime() {\n    this.setState({\n      time: new Date(),\n    });\n  }\n\n  componentDidMount() {\n    setInterval(() => this.currentTime(), 1000);\n  }\n\n  render() {\n    return <p>{this.state.time.toLocaleTimeString()}</p>;\n  }\n}\n\nexport default Time;\n","import React from \"react\";\nimport PlayerChoice from \"./components/PlayerChoice\";\nimport \"./App.css\";\nimport Time from \"./components/Time\";\n\nconst CHOICES = [\"rock\", \"paper\", \"scissors\"];\n\nfunction getRandomChoice() {\n  const randomNum = Math.random(); // random num from 0-1\n  const random0to2 = Math.floor(randomNum * 3);\n  return CHOICES[random0to2];\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playerScore: 0,\n      computerScore: 0,\n      resultMessage: \"Pick one to start...\",\n    };\n\n    this.handleClickChoice = this.handleClickChoice.bind(this);\n    this.handleClickReset = this.handleClickReset.bind(this);\n  }\n\n  handleClickReset = () => {\n    console.log(\"CLICKED\");\n\n    this.setState({\n      playerScore: 0,\n      computerScore: 0,\n      resultMessage: \"Start a new Game\",\n    });\n  };\n\n  handleClickChoice(playerChoice) {\n    const computerChoice = getRandomChoice();\n    if (playerChoice === computerChoice) {\n      this.setState({\n        resultMessage: \"Its a tie!\",\n      });\n      return;\n    }\n\n    if (\n      (playerChoice === \"rock\" && computerChoice === \"scissors\") ||\n      (playerChoice === \"paper\" && computerChoice === \"rock\") ||\n      (playerChoice === \"scissors\" && computerChoice === \"paper\")\n    ) {\n      // Player won\n      this.setState({\n        playerScore: this.state.playerScore + 1,\n        resultMessage: \"Player won this round!\",\n      });\n    } else {\n      // Computer won\n      this.setState({\n        computerScore: this.state.computerScore + 1,\n        resultMessage: \"Computer won this round!\",\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.playerScore === 5) {\n      this.setState({\n        resultMessage: \"Congrats, you won the game!\",\n      });\n      this.handleClickReset();\n    } else if (this.state.computerScore === 5) {\n      this.setState({\n        resultMessage: \"Computer won the game!\",\n      });\n      this.handleClickReset();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Rock Paper Scissor Game</h1>\n          <Time />\n        </header>\n\n        <div className=\"score-board\">\n          <div id=\"player-label\" className=\"badge\">\n            player\n          </div>\n          <div id=\"computer-label\" className=\"badge\">\n            comp\n          </div>\n          <span style={{}}>{this.state.playerScore}</span>:\n          <span>{this.state.computerScore}</span>\n        </div>\n\n        <div id=\"game\">\n          <img className=\"computer\" src=\"computer.png\" alt=\"computer\" />\n\n          <div className=\"output\">\n            {this.state.resultMessage && <p>{this.state.resultMessage}</p>}\n          </div>\n\n          <div className=\"button-wrapper\">\n            <PlayerChoice name=\"paper\" onClickChoice={this.handleClickChoice} />\n            <PlayerChoice name=\"rock\" onClickChoice={this.handleClickChoice} />\n            <PlayerChoice\n              name=\"scissors\"\n              onClickChoice={this.handleClickChoice}\n            />\n          </div>\n\n          <p id=\"action-message\"> Make your move</p>\n\n          <button className=\"restart\" onClick={this.handleClickReset}>\n            Restart\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}